# -*- python -*-
# jmyers, 9/11/09 

import os, os.path
import lsst.SConsUtils as scons
import distutils.sysconfig

Import("env")


#ext_libs = ["gsl", "gslcblas", "pex_exceptions"]
		      
commonStuff = ['common', 'MopsDetection',
               'Orbit', 'TrackletVector', 
               'TrackSet', 'Track', 
               'TrackVector']

common_libs = []

for lib in commonStuff:
    common_libs.append(env.Library(lib, lib+'.cc'))

common_libs.append(env.StaticLibrary('rmsLineFit', 
                                     ['rmsLineFit.cc', 'common', 
                                      'MopsDetection', 'Tracklet.cc']))

common_libs.append(env.StaticLibrary('Tracklet',
                                     ['Tracklet.cc', 'rmsLineFit']))


common_libs.append(env.StaticLibrary('fileUtils', 
                                     ['fileUtils.cc', 'MopsDetection','Tracklet']))


common_libs.append(env.Library('removeSubsets',  ['removeSubsets.cc'] +common_libs))


env.Program('../bin/removeSubsets',  ['removeSubsetsMain.cc'] + common_libs,
            LIBS=filter(lambda x: x != "mops_daymops", env.getlibs("mops_daymops")))

# for some insane reason, this won't compile unless you list the libraries explicitly rather than
# appending common_libs. No idea why! Driving me crazy.

#env.Program('../bin/readTracksWriteStats',  ['readTracksWriteStatsMain.cc'] + common_libs, 
#            LIBS=filter(lambda x: x != "mops_daymops", env.getlibs("mops_daymops")))
env.Program('../bin/readTracksWriteStats',  ['readTracksWriteStatsMain.cc', 
                                             'readTracksWriteStats.cc',
                                             'Track', 'TrackVector',
                                             'TrackletVector',
                                             'TrackSet',
                                             'linkTracklets/linkTracklets.cc',
                                             'linkTracklets/TrackletTree',
                                             'linkTracklets/TrackletTreeNode',
                                             'MopsDetection', 'fileUtils', 'Tracklet', 
                                             'rmsLineFit', 'common'],

            LIBS=filter(lambda x: x != "mops_daymops", env.getlibs("mops_daymops")))




Export("common_libs")
#Export("ext_libs")

env.Program('../tests/utilities-unitTests', ['generalUnitTests.cc'] + common_libs, 
            LIBS=filter(lambda x: x != "mops_daymops", env.getlibs("mops_daymops")))

env.Program('../tests/Track-unitTests', 
            ['Track-unitTests.cc', 'Track.o', 'TrackSet.o'] + common_libs,
            LIBS=filter(lambda x: x != "mops_daymops", env.getlibs("mops_daymops")))



SConscript(os.path.join('findTracklets','SConscript'))
SConscript(os.path.join('collapseTrackletsAndPostfilters','SConscript'))
SConscript(os.path.join('linkTracklets','SConscript'))

SConscript(os.path.join('detectionProximity','SConscript'))
SConscript(os.path.join('fieldProximity','SConscript'))
SConscript(os.path.join('orbitProximity','SConscript'))


# swig wrappers

#env.CheckSwig("python", ilang="c++")

#env.LoadableModuleIncomplete("_MopsDetection", Split("MopsDetection.i"), LIBS=env.getlibs(["pex_exceptions"]))

#env.LoadableModuleIncomplete("_Orbit", Split("Orbit.i"), LIBS=env.getlibs(["pex_exceptions"]))

#env.LoadableModuleIncomplete("_Tracklet", ["Tracklet.i"], LIBS=env.getlibs(["pex_exceptions"]))

